@page "/Register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="RegisterUser" FormName="RegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="fullNameInput">Full Name:</label>
        <InputText id="fullNameInput" @bind-Value="registerModel.FullName" />
    </div>
    
    <div>
        <label for="emailInput">Email:</label>
        <InputText id="emailInput" @bind-Value="registerModel.Email" />
    </div>

    <div>
        <label for="passwordInput">Password:</label>
        <InputText id="passwordInput" @bind-Value="registerModel.Password" type="password" />
    </div>

    <button type="submit">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <p style="color:@(IsError ? "red" : "green")">@Message</p>
}

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string Message = "";
    private bool IsError = false;

    private async Task RegisterUser()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/account/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                IsError = false;
                Message = "Registered successfully! Redirecting to login...";
                // Espera 1 segundo e redireciona
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                IsError = true;
                var errorContent = await response.Content.ReadAsStringAsync();
                Message = $"Erro: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            IsError = true;
            Message = $"Erro inesperado: {ex.Message}";
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "O campo Nome é obrigatório")]
        public string FullName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "O campo Email é obrigatório")]
        [EmailAddress(ErrorMessage = "Digite um email válido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "O campo Senha é obrigatório")]
        [MinLength(6, ErrorMessage = "A senha deve ter no mínimo 6 caracteres")]
        public string Password { get; set; } = string.Empty;
    }
}